<?xml version="1.0" encoding="utf-8"?>
<resources>
	<string name="c6_01">在日常生活中，在盖房子之前要首先设计一个建筑图纸，然后根据图纸来盖房子。所谓类，好比在日常生活中描述一个物品的信息，如房子的建筑图纸。而对象就好比实实在在的房子。本章将要介绍类的定义、类的成员变量的定义和方法的定义、方法的参数等知识。通过本章的学习,读者应该能够完成如下几个目标。
\n了解什么是面向对象。
\n熟悉Java中的类并能够进行类的操作。
\n掌握成员变量和局部变量的区别。
\n掌握Java程序中的方法的创建和使用。\n
	</string>
	<string name="c6_02">6.1  什么是面向对象\n所谓面向对象，是指编写程序的时候要围绕着一个对象的功能进行编写的。本节将要介绍面向对象的特点以及与面向过程编程的区别。\n
	</string>
	<string name="c6_03">6.1.1  面向对象编程的特点\n面向对象编程的缩写是OOP，全称为Object Oriented Programming。在进行面向对象的编程时，方法和成员变量都写在具体的对象里，并对其成员变量和方法有很好的隐藏性。对象之间的访问都是通过其接口进行的。下面列举面向对象编程的特点,分为如下几种。\n首先要说的是继承。所谓继承，是发生在类与类之间的，是子类共享父类成员变量和方法的一种模式。通过扩展子类的方法可以使子类有比父类更加强大的功能。\n说明：继承是面向对象编程的特点，同样也是Java的特点，这里和其他语言有很大不同。\n
	示例代码\n
	01	//bike类描述的是一个自行车\n
	02	class bike\n
	03	{\n
	04	}\n
	05	\n
	06	// racing_cycle类描述的是一个公路赛车,继承自bike\n
	07	class racing_cycle extends bike\n
	08	{\n
	09	}\n
	</string>
	<string name="c6_04">提示：继承是发生在类与类之间的。继承可以是单继承，也可以多层继承。\n多态是指对象在运行期和编译期具有两种状态，多态的使用使代码具有了更多的灵活性和重用性。\n抽象是指在定义类的时候，确定了该类的一些行为和动作。比如自行车可以移动，但怎么移动不进行说明。这种提前定义一些动作和行为的类为抽象的。\n封装是指对一件物品的描述信息是这个物品所特有的，是不能让外界看到的一些成员变量和方法。在Java里成员变量和方法就被封装在类里，需要通过一些特有的方法访问它们。\n
	</string>
	<string name="c6_05">6.1.2  面向对象编程与面向过程编程的区别\n面向过程是指在遇到问题的时候，怎么去解决这个问题，而分析问题的步骤，就是解决这个问题的方法，是通过方法一步一步来完成的。面向对象是指在遇到问题的时候，把问题分解成各自独立功能的类，而这个类是完成各自问题的。总结如下所述。\n面向过程和面向对象最明显的区别就是，面向对象是按照要完成的功能来实现的，而面向过程是按照解决这个问题的步骤来实现的。\n面向对象是按照程序中的功能进行划分的。\n面向过程是按照问题的解决思路来划分的，是一步一步来解决问题的。\n面向过程更看重的是完成问题的过程。\n面向对象更看重的是功能，通过各种功能模块的组合来完成问题。\n
	</string>
	<string name="c6_06">6.2  什么是类\n所谓类是一种抽象的东西，描述的是一个物品的完整信息。比如房子和图纸的关系。在Java里，图纸就是类，定义了房子的各种信息，而房子是类的实体。
	</string>
	<string name="c6_07">6.2.1  类的定义和对象的创建\n定义一个类表示定义了一个功能模块。下面先介绍如何定义一个类，以及如何创建这个类的实例，即对象。类是通过关键字class来定义的，在class关键字后面加上类的名称，这样就创建了一个类。在类里面可以定义类的成员变量和方法。类的语法代码如下所示。\n
	class 类的名称\n
	{\n
	\t//类的成员变量\n
	\t//类的方法\n
	}\n
	创建类的实例是通过new关键字来定义的，后面加上定义类时为类起的名称，需要注意的是在类名后还需要一个括号。创建类的实例的代码如下所示。\n
	new 类的名称();\n
	</string>
	<string name="c6_08">6.2.2  如何使用现有类\n在定义一些类的时候，如何使用它们呢？这里需要分为多种情况。定义的类可以在一个包下面，也可以不在一个包下面，这在使用时是不同的。类又分为已有类和自定义类，它们之间的使用也是有区别的。下面就通过范例来讲解在不同情况下如何使用类。\n【范例】在同目录下使用类。首先是定义一个bike类，在该类中不存在任何成员变量和方法，这里只是演示如何在同一目录下使用类。\n
	示例代码\n
	01	//bike.java	\n
	02	class bike\n
	03	{\n
	04	}\n\n
	接下来定义一个使用bike类的类。\n
	01	//testBike.java\n
	02	//在testBike类里使用了bike类\n
	03	class testBike\n
	04	{\n
	05	\t bike b = new bike();\n
	06	}\n
	</string>
	<string name="c6_09">6.2.3  类设计的技巧\n设计一个类要明确这个所要完成的功能，类里的成员变量和方法是描述类的功能的。如果定义了和这个类不相关的成员变量和方法将不是一个良好的设计。\n【范例】示例代码是一个不太好的类设计。\n
	示例代码\n
	01	public class bike\n
	02	{\n
	03	\t//这个成员变量描述的是自行车的颜色.\n
	04	\tString color = "黄色";\n
	05	\t\n
	06	\t//这个成员变量描述的是公路赛车的颜色,所以在这里不太合适\n
	07	\tString racing_color = "绿色";\n
	08	}\n\n
	在本程序中定义了一个表示自行车颜色的color成员变量，又定义了一个表示赛车颜色的racing_color成员变量；而该程序是定义的一个bike自行车类，所以定义表示赛车颜色的racing_color成员变量是不太好的选择。 \n
	</string>
	<string name="c6_10">【示例二】\n
	01	public class bike\n
	02	{\n
	03	\t//这个成员变量描述的是自行车的颜色\n
	04	\tString color = "黄色";\n
	05	}\n
	01	public class racing\n
	02	{\n
	03	\t//这个成员变量描述的是公路赛车的颜色\n
	04	\tString racing_color = "绿色";\n
	05	}\n
【代码解析】在该范例中，定义了两个类。其中bike类中只定义了一个表示自行车颜色的color成员变量。同样在racing类中只定义了一个表示赛车颜色的racing_color成员变量。这种设计相对上一个范例中的设计要好得多，这样使类和成员变量相对应，也使别人更容易读懂代码。\n
	</string>
	<string name="c6_11">6.3  成员变量\n所谓成员变量就是这个类里定义的一些私有的变量.，这些变量是属于这个类的。就好比日常生活中的自行车的大小，即这个车子是26还是28的，这个尺寸就是自行车的成员变量，是描述这个自行车的。下面开始介绍成员变量。\n
	</string>
	<string name="c6_12">6.3.1  成员变量的创建\n成员变量描述的是这个类的一些属性或状态的，下面通过代码来演示怎么定义成员变量。语法为：变量的类型 变量的名称。\n【范例】创建成员变量的一般形式。\n
	示例代码\n
	01	//bike类描述的是一个自行车\n
	02	public class bike\n
	03	{
	04	\t//这个成员变量描述的是自行车的颜色.\n
	05	\tString color;\n
	06	\n
	07	\t//这个成员变量描述的是自行车的大小,即尺寸.\n
	08	\tString size;\n
	09	}\n
	在该程序中，定义了一个叫做bike的类，在该类中定义了两个成员变量，一个是表示自行车颜色的color成员变量，一个是表示自行车型号的size成员变量。\n
	</string>
	<string name="c6_13">(通过new关键字来创建这个bike类的对象，用bike类的对象引用b来给其成员变量赋值。因为成员变量是在这个类实例化后才能访问到的。成员变量赋完值后，调用println语句来打印并显示结果。) \n
	</string>
	<string name="c6_14">6.3.2  成员变量的初始化\n通过new关键字来创建一个对象后，会有一个系统默认的初始值。所以说不管有没有在创建成员变量的时候给变量一个值，系统都会有一个默认的值。\n成员变量和对象的引用在申明的时候不对其赋初值，那么系统都会赋一个初值（具体请查阅资料或到bxa学堂吧获取）。
	</string>
	<string name="c6_15">6.4  局部变量\n局部变量和成员变量很相似都是描述信息的。局部变量和成员变量的不同点就是局部变量是在方法体里创建的，在方法体外是访问不到这个变量的。\n
	</string>
	<string name="c6_16">6.4.1  局部变量的创建和初始化\n局部变量描述的是方法体的一些属性或状态的，下面通过代码来演示怎么定义局部变量。创建局部变量的基本语法为：变量的类型 变量的名称。\n【范例】演示局部变量的例子。\n
	示例代码\n
	01	//test类描述的是基本类型的初始化\n
	02	public class test4\n
	03	{\n
	04	\t//程序的运行函数即主入口函数\n
	05	\tpublic static void main(String args[])\n
	06	\t{\n
	07	\t\t//基本类型的局部变量\n
	08	\t\tint size = 123;\n
	09	\t\tboolean b = true;\n
	10	\t\t//打印并显示局部变量\n
	11	\t\tSystem.out.println(size);\n
	12	\t\tSystem.out.println(b);\n
	13	\t}\n
	14	} \n
	</string>
	<string name="c6_17">6.4.2  局部变量和成员变量的区别\n局部变量描述的是这个方法体内的属性的，而成员变量描述的是这个对象里的属性的，它们之间的区别，即访问区别如下：\n成员变量可以被public、protected、default、private、static、final修饰符修饰。\n局部变量可以被final修饰符修饰，但不能修饰为public、protected、default、private、static。\n成员变量是在堆里进行创建的，而局部变量是在栈里进行创建的。\n成员变量是系统默认值。\n局部变量没有系统默认值，必须手动赋值。\n
	</string>
	<string name="c6_18">6.5  方法\n每个人都有走、吃和睡等动作。在Java中，所谓方法就好比日常生活中的一个动作，是完成一系列操作的。在Java中也是如此，方法收到对象的信息，进行处理的操作。\n
	</string>
	<string name="c6_19">6.5.1  方法的创建和参数\n方法的参数是提供外界在执行方法的时候提供给方法的特殊描述信息的，好比日常生活中的，用力砸东西，用大力砸东西。而这个用大力就是提供给这个进行特殊描述的。创建方法的语法为：\n
	方法修饰符 方法的返回类型 方法名称(方法参数)\n
	{\n
	(方法体)\n
	}\n
	方法的定义如下所示。\n
	public void add(int i, int n)\n
	{\n
	\tSystem.out.println(i+n);\n
	}\n
	代码说明：\n方法名称为add，有两个参数都是int类型的。\n方法体是打印i+n的值，并显示出来。\n方法的修饰符为public类型的，修饰符可有可无。\n方法的返回为空(void)\n
	</string>
	<string name="c6_20">6.5.2  方法的返回类型\n方法的返回类型有很多种，主要分为如下几类。\n方法返回值为void类型时为无返回值。\n方法返回值还可以为任意的类型，如String、Boolean、int。如果定义了方法的返回类型就必须在方法体内用return把返回值进行返回。\n方法的返回值可以为null，但必须是对象类型。基本类型不能返回null。\n在返回值为基本类型的时候，只要能够自动转换就可返回。\n方法的返回类型可以为object对象\n方法的参数也有多种形式，下面是对方法参数的讨论。\n方法的参数可以为基本数据类型，也可以为对象引用类型。\n每个参数都有完整的声明该变量的形式。\n方法的参数可以有一个，也可有多个。\nJava程序的入口main就为一个方法，参数为String[] args，它是个特殊的方法。\n
	</string>
	<string name="c6_21">6.5.3  方法参数的传递\n参数的传递是传递的值还是引用呢。下面通过例子来分别说明，请仔细考虑。\n【范例】当传递类型为基本类型时，传递的是该类型的值。\n
	01	//test类描述的是基本类型的传递\n
	02	public class test\n
	03	{\n
	04	\t//方法add是把传入的参数进行+1，并显示其结果\n
	05	\tpublic void add(int i)\n
	06	\t{\n
	07	\t\ti = i + 1;\n
	08	\t\tSystem.out.println(i);\n
	09	\t}\n
	10 \n
	11	\t//程序的运行方法，即主入口方法\n
	12	\tpublic static void main(String args[])\n
	13	\t{\n
	14	\t//基本类型的局部变量\n
	15	\t\tint size = 44;\n
	16	\n
	17	\t\t//创建bike类的对象实例，即bike类的对象引用b\n
	18	\t\ttest t = new test();\n
	19	\n
	20	\t\t//打印原来的值\n
	21	\t\tSystem.out.println(size);\n
	22	\t\t//运行时的值\n
	23	\t\tt.add(size);\n
	24	\t\t//打印运行后的值\n
	25	\t\tSystem.out.println(size);\n
	26	\t}\n
	27	}\n
	在参数为基本类型进行传递的时候，是传递的这个值的备份，即第二份。不论在方法中怎么改变这个备份，都不是操作原来的数据，所以原来的值是不会改变的。 \n
	</string>
	<string name="c6_22">6.6  对象引用的使用\n所谓对象引用就是该引用名称指向内存中的一个对象，通过调用该引用即可完成对该对象的操作。本节将要讨论一些操作对象引用中将出现的一些常见问题。如不存在的对象、空引用、对象间的比较等问题，下面分别来说明。\n
	</string>
	<string name="c6_23">6.6.1  调用不存在的对象或成员变量\n如果调用的对象或成员变量没有创建，那么在编译的时候编译器将出现错误。下面用代码演示这个错误，并演示如何修正。\n【范例】代码演示访问不存在的成员变量。\n
	示例代码\n
	01	//test类描述的是测试访问不存在的成员变量\n
	02	public class test\n
	03	{\n
	04	\t//main方法为程序的入口函数\n
	05	\tpublic static void main(String[] args)\n
	06	\t{\n
	07	\t\t//创建test类的对象实例\n
	08	\t\ttest t = new test();\n
	09	\t\t//t.a访问的是一个不存在的成员变量，将提示不可识别的字段。\n
	10	\t\tSystem.out.println(t.a);\n
	11	\t}\n
	12	} \n
	运行将会发生如下异常。\n
	Exception in thread "main" java.lang.Error: Unresolved compilation problem: \nt.a cannot be resolved or is not a field\nat test.main(test.java:7)\n
	【代码解析】对象引用t要访问的是a这个成员变量，而a没有声明，在编译的时候将提示错误信息。在错误提示里，已经提示为main方法里的第7行，只需查看这里就能找到错误的所在。\n\n
	修改上述代码使程序运行通过。 \n
	01	//test类描述的是测试访问不存在的成员变量\n
	02	public class test\n
	03	{\n
	04		//a为test类的成员变量\n
	05		String a;\n
	06	\n
	07	\t//main方法为程序的入口方法\n
	08	\tpublic static void main(String[] args)\n
	09	\t{\n
	10	\t\t//创建test类的对象实例\n
	11	\t\ttest t = new test();\n
	12	\t\t//t.a访问的是一个不存在的成员变量，将提示不可识别的字段\n
	13	\t\tSystem.out.println(t.a);\n
	14	\t}\n
	15	}\n
根据上例中的错误提示在test类声明了一个名称为a的成员变量。因为String类型的a没有进行赋值，所以打印出来为null。\n
	</string>
	<string name="c6_24">6.6.2  调用对象为null值的引用\n任何操作的对象的值为null的时候都将出现空指针错误，即“NullPointException“错误，因为成员变量和方法是属于对象的，即属于用new关键字创建出来的对象的。下面用代码来演示这个错误，并演示如何进行修正。\n
	01	//ArrayList类所需要的\n
	02	import java.util.ArrayList;\n
	03	\n
	04	//test类测试访问null值的对象\n
	05	public class test\n
	06	{\n
	07	\t//声明一个成员变量a并进行初值\n
	08	\tpublic String a = "test类的成员变量";\n
	09 \n
	10	\t//Java程序的主入口方法\n
	11	\tpublic static void main(String[] args)\n
	12	\t{\n
	13	\t\t//创建test类的对象实例\n
	14	\t\ttest t = new test();\n
	15	\n
	16	\t\t//创建一个集合类，对象引用为一个null值\n
	17	\t\tArrayList al = null;\n
	18	\n
	19	\t\t//向一个null的集合对象里添加数据\n
	20	\t\tal.add(t.a);\n
	21	\t}\n
	22	}\n
	ArrayList类为一个集合类和数组很相似，都是用来存储数据用的。错误提示在main方法里的20行，提示为NullPointerException，即空指针错误。对象引用al声明为一个null值，表示这个对象并没有创建其对象的实例，只是一个引用而已。当操作任意一个为null的对象的时候都将提示空指针错误。\n\n对本节的内容进行总结，可以概括成如下几点。\n任何操作的对象的值为null，都将出现空指针错误，即“NullPointException”。\nNullPointerException错误是运行期的错误，在编译的时候系统是不进行提示的。\n在声明一个对象引用后尽量为其赋一个初值，来避免空指针的出现。\n
	</string>
	<string name="c6_25">6.6.3  对象引用间的比较\n两个对象引用进行比较，比较的是这两个对象的引用，而引用是在内存中的一个地址。地址当然是不能相同的了。\nequals方法在这里比较的是对象的引用，因为equals方法是Object类的方法，而任何类的父类都为Object，equals方法是继承过来的。继承将在后面的章节里做详细讲解。用new关键字创建的对象地址是重新分配的，它们进行比较，地址当然是不同的了。 \n
	</string>
	<string name="c6_26">6.7  <b>this</b>\nthis是Java保留的一个关键字，所谓this就好比日常生活中的“你我他”中的我，表示自己、本身的意思。在Java里也是如此，表示类的本身。\n
	</string>
	<string name="c6_27">6.8  小结\n通过学习本章，可以让读者了解面向对象的基本思想、类的创建和使用、成员变量和局部变量的区别，以及对象引用的一些注意事项等问题。学好本章可以为以后的学习打下基础。\n
	</string>
</resources>
