<?xml version="1.0" encoding="utf-8"?>
<resources>
	<string name="c12_01">以前看到过这样一条新闻，说在一个鸡蛋中发现里面有一个小鸡蛋，这个小鸡蛋同样有蛋清和蛋黄，当时感觉很奇怪的。后来学习Java后，发现在Java中竟然也有这种奇怪的事，那就是内部类。内部类就好像刚提到的鸡蛋中的小鸡蛋一样，包含在另一个类中的。通过本章的学习，会发现内部类还有好多和该小鸡蛋相似的地方。读者通过本章的学习，应该完成如下几个目标。\n了解什么是非静态内部类和如何进行非静态内部类和外部类之间的访问。\n了解什么是局部内部类和如何进行局部内部类和外部类之间的访问。\n了解什么是静态内部类和如何进行静态内部类和外部类之间的访问。\n了解什么是匿名内部类和如何进行匿名内部类和外部类之间的访问。\n
	</string>
	<string name="c12_02">12.1  非静态内部类\n当一个类作为另一个类的非静态成员，则这个类就是一个非静态内部类。在本节中就来学习如何创建和使用非静态内部类，同时也来讲解如何在内部类中访问外部类和在外部类中如何访问内部类。\n
	</string>
	<string name="c12_03">12.1.1  创建非静态内部类\n创建非静态内部类是很容易的，只需要定义一个类让该类作为其他类的非静态成员。该非静态内部类和成员变量或者成员方法没有区别，同样可以在非静态内部类前面加可以修饰成员的修饰符。\n
创建非静态内部类的基本语法如下所示。\n
	class Wai\n
	{\n
	\t\tclass Nei\n
	\t\t{\n
	\t\t\t\t//内部类成员\n
	\t\t}\n
	\t\t//外部类成员\n
	}\n
	</string>
	<string name="c12_04">12.1.2  在外部类中访问内部类\n在内部类的程序中，是经常会进行外部类和内部类之间访问的。在外部类中访问内部类是很容易的，只要把内部类看成一个类，然后创建该类的对象，使用对象来调用内部类中的成员就可以了。\n
【范例】示例代码是一个在外部类中访问内部类的程序。\n
	01	class Wai\n
	02	{\n
	03	\t\tclass Nei				//创建非静态内部类\n
	04	\t\t{\n
	05	\t\t\t\tint i=5;			//内部类成员\n
	06	\t\t}\n
	07	\t\tpublic void myVoid()	//外部类成员\n
	08	\t\t{\n
	09	\t\t\t\tNei n=new Nei();	//创建一个内部类对象\n
	10	\t\t\t\tint ii=n.i;			//访问内部类成员\n
	11	\t\t\t\tSystem.out.println("内部类的变量值为："+ii);\n
	12	\t\t}\n
	13	}\n
	14	public class NeiBuLei2\n
	15	{\n
	16	\t\tpublic static void main(String args[])\n
	17	\t\t{\n
	18	\t\t\t\tWai w=new Wai();\n
	19	\t\t\t\tw.myVoid();\n
	20	\t\t}\n
	21	} \n
	从程序的第16行主方法讲起，在main方法中，首先创建一个外部类对象，然后访问外部类的成员方法。在外部类的成员方法中，创建了一个内部类对象，然后使用内部类对象调用内部类的成员变量，从而得到结果。编译该程序将产生三个class文件，分别是主类、外部类和内部类。内部类产生的class文件的名称为Wai$Nei.class，在该名称中可以区分该内部类到底是哪一个类的内部类。\n
	</string>
	<string name="c12_05">12.1.3  在外部类外访问内部类\n不但可以在外部类中访问内部类，还可以在外部类外访问内部类。读者肯定会觉得非常难的，要想访问类成员中的成员怎么访问呢。其实在Java中，是很容易做到的。在外部类外访问内部类的基本语法如下所示。\nWai.Nei wn=new Wai().new Nei();\n使用该方法就能够创建一个内部类对象，使用该内部类对象就可以访问内部类的成员。该方法是不容易理解的，该方法也是可以分为两条语句的。\nWai w=new Wai();\nWai.Nei wn=w.new Nei();\n这样就很容易理解了。首先是创建一个外部类的对象，然后让该外部类对象调用创建一个内部类对象。 \n
	</string>
	<string name="c12_06">示例：一个在外部类外访问内部类的程序\n
	01	class Wai\n
	02	{\n
	03	\t\tclass Nei				//创建非静态内部类\n
	04	\t\t{\n
	05	\t\t\t\tint i=5;				//内部类成员\n
	06	\t\t\t\tint ii=6;\n
	07	\t\t}\n
	08	}\n
	09	public class NeiBuLei3\n
	10	{\n
	11	\t\tpublic static void main(String args[])\n
	12	\t\t{\n
	13	\t\t\t\tWai.Nei wn1=new Wai().new Nei();\n
	14	\t\t\t\tWai w=new Wai();\n
	15	\t\t\t\tWai.Nei wn2=w.new Nei();\n
	16	\t\t\t\tSystem.out.println("内部类中的变量i的值为："+wn1.i);\n
	17	\t\t\t\tSystem.out.println("内部类中的变量ii的值为："+wn2.ii);\n
	18	\t\t}\n
	19	}\n在示例代码中使用了两种方法来从外部类外访问内部类。在外部类外访问内部类时，是不能够直接创建内部类对象的，因为内部类只是外部类的一个成员。所以要想创建内部类对象，首先要创建外部类对象，然后以外部类对象为标识来创建内部类对象。\n
	</string>
	<string name="c12_07">12.1.4  在内部类中访问外部类\n在内部类中访问外部类，就像所有的同一个类中成员互相访问一样，这样是没有限制的，包括将成员声明为private私有的。\n【范例】示例代码是一个在内部类中访问外部类的程序。\n
	示例代码\n
	01	class Wai\n
	02	{\n
	03	\t\tint i=8;					//外部类成员变量\n
	04	\t\tclass Nei					//创建非静态内部类\n
	05	\t\t{\n
	06	\t\t\t\tpublic void myVoid()	//内部类成员变量\n
	07	\t\t\t\t{\n
	08	\t\t\t\t\t\tSystem.out.println("外部类中的成员变量值为："+i);\n
	09	\t\t\t\t}\n
	10	\t\t}\n
	11	}\n
	12	public class NeiBuLei5\n
	13	{\n
	14	\t\tpublic static void main(String args[])\n
	15	\t\t{\n
	16	\t\t\t\tWai w=new Wai();		//创建外部类对象\n
	17	\t\t\t\tWai.Nei wn2=w.new Nei();//创建内部类对象\n
	18	\t\t\t\twn2.myVoid();			//调用内部类中成员\n
	19	\t\t}\n
	20	}\n
	在示例代码中，在内部类中定义了一个myVoid来访问外部类中的成员变量i。可以看到从内部类中访问外部类是非常容易的，不需要添加任何内容，就像成员方法间调用一样。\n有些读者学习完示例代码后，会有疑问，如果外部类中也有一个成员变量i怎么办呢？读者可以进行实验，从结果中可以看到得到的是内部类成员变量的值。下面通过示例代码解决这个问题。\n
	</string>
	<string name="c12_08">示例：一个在内部类和外部类中具有同名称变量访问的程序\n
	01	class Wai\n
	02	{\n
	03	\t\tint i=8;						//外部类成员变量\n
	04	\t\tclass Nei					//创建非静态内部类\n
	05	\t\t{\n
	06	\t\t\t\tint i=9;\n
	07	\t\t\t\tWai ww=new Wai();\n
	08	\t\t\t\tpublic void myVoid()		//内部类成员变量\n
	09	\t\t\t\t{\n
	10	\t\t\t\t\t\tSystem.out.println("内部类中的成员变量值为："+i);\n
	11	\t\t\t\t\t\tSystem.out.println("外部类中的成员变量值为："+ww.i);\n
	12	\t\t\t\t}\n
	13	\t\t}\n
	14	}\n
	15	public class NeiBuLei6\n
	16	{\n
	17	\t\tpublic static void main(String args[])\n
	18	\t\t{\n
	19	\t\t\t\tWai w=new Wai();			//创建外部类对象\n
	20	\t\t\t\tWai.Nei wn2=w.new Nei();	//创建内部类对象\n
	21	\t\t\t\twn2.myVoid();				//调用内部类中成员\n
	22	\t\t}\n
	23	}\n
	在本程序中的第3行定义了一个外部类的成员变量，第6行定义了一个内部类的成员变量，这两个成员变量的名称是相同的。而在内部直接访问时，将访问的是内部类的成员变量。要想访问外部类成员变量，就需要首先创建一个外部类对象，然后使用该对象调用外部类成员变量。\n
	</string>
	<string name="c12_09">12.2  局部内部类\n在上一节中介绍了非静态成员内部类，以及如何对非静态成员内部类进行操作。在本节中就来学习局部内部类的知识，通过非静态成员内部类的学习，是很容易来学习局部内部类的。从名称就可以看出局部内部类是作为一个类的局部变量来定义的。\n
	</string>
	<string name="c12_10">12.2.1  创建局部内部类\n局部内部类的作用范围是和局部变量的作用范围相同的，只在局部中起作用，所以对局部内部类进行访问时，只能在该局部内部类的作用范围内。\n【范例】示例代码是一个创建和访问局部内部类的程序。\n
	示例代码\n
	01	class Wai\n
	02	{\n
	03	\t\tpublic void myVoid()\n
	04	\t\t{\n
	05	\t\t\t\tclass Nei				//定义一个局部内部类\n
	06	\t\t\t\t{\n
	07	\t\t\t\t\t\tint i=5;			//局部内部类的成员变量\n
	08	\t\t\t\t}\n
	09	\t\t\t\tNei n=new Nei();\n
	10	\t\t\t\tSystem.out.println("局部内部类的成员变量为："+n.i);\n
	11	\t\t}\n
	12	}\n
	13	public class NeiBuLei8\n
	14	{\n
	15	\t\tpublic static void main(String args[])\n
	16	\t\t{\n
	17	\t\t\t\tWai w=new Wai();			//创建外部类对象\n
	18	\t\t\t\tw.myVoid();				//调用内部类中成员\n
	19	\t\t}\n
	20	}\n
	在本程序中定义了一个局部内部类，并进行了对该局部内部类的访问。对该内部类进行访问必须在该内部类所在的方法中通过创建内部类对象来进行访问。这是因为这里的内部类是作为局部成员的形式出现的，只能在它所在的方法中进行调用。\n
	</string>
	<string name="c12_11">12.2.2  在局部内部类中访问外部类成员变量\n在局部内部类中访问外部类成员变量是很容易实现的，并不需要进行过多操作。在局部内部类中可以直接调用外部类的成员变量。\n【范例】示例代码是一个在局部内部类中访问外部类成员变量的程序。\n
	示例代码\n
	01	class Wai\n
	02	{\n
	03	\t\tint i=9;					//定义一个外部类的成员变量\n
	04	\t\tpublic void myVoid()\n
	05	\t\t{\n
	06	\t\t\t\tclass Nei				//定义一个局部内部类\n
	07	\t\t\t\t{\n
	08	\t\t\t\t\t\tpublic void myNeiVoid()\n
	09	\t\t\t\t\t\t{\n
	10	\t\t\t\t\t\t\t\tSystem.out.println("外部类的成员变量值为："+i);//访问外部类的成员变量\n
	11	\t\t\t\t\t\t}\n
	12	\t\t\t\t}\n
	13	\t\t\t\tNei n=new Nei();		//创建内部类对象\n
	14	\t\t\t\tn.myNeiVoid();			//调用内部类中的成员方法\n
	15	\t\t}\n
	16	}\n
	17	public class NeiBuLei9\n
	18	{\n
	19	\t\tpublic static void main(String args[])\n
	20	\t\t{\n
	21	\t\t\t\tWai w=new Wai();		//创建外部类对象\n
	22	\t\t\t\tw.myVoid();				//调用内部类中成员\n
	23	\t\t}\n
	24	}\n
	在示例代码中定义了一个局部内部类，在该局部内部类中定义了一个方法来访问外部类的成员变量。从运行结果中可以看出在内部类中可以成功访问外部类的成员变量。在该程序中同样需要注意的是，对内部类进行访问需要和内部类在同一方法中。\n
	</string>
	<string name="c12_12">12.2.3  在局部内部类中访问外部类的局部变量\n和访问外部类的成员变量不同，在局部内部类中访问外部类中和局部内部类在同一局部的局部变量是不能够直接访问的。\n【范例】示例代码是一个错误的访问外部类局部变量的程序。\n
示例代码\n
	01	class Wai\n
	02	{\n
	03	\t\tpublic void myVoid()\n
	04	\t\t{\n
	05	\t\t\t\tint i=9;				//定义一个外部类的局部变量\n
	06	\t\t\t\tclass Nei				//定义一个局部内部类\n
	07	\t\t\t\t{\n
	08	\t\t\t\t\t\tpublic void myNeiVoid()\n
	09	\t\t\t\t\t\t{\n
	10	\t\t\t\t\t\t\t\tSystem.out.println("外部类的局部变量值为："+i);//访问外部类的成员变量\n
	11	\t\t\t\t\t\t}\n
	12	\t\t\t\t}\n
	13	\t\t\t\tNei n=new Nei();		//创建内部类对象\n
	14	\t\t\t\tn.myNeiVoid();			//调用内部类中的成员方法\n
	15	\t\t}\n
	16	}\n
	17	public class NeiBuLei10\n
	18	{
	19	\t\tpublic static void main(String args[])\n
	20	\t\t{\n
	21	\t\t\t\tWai w=new Wai();		//创建外部类对象\n
	22	\t\t\t\tw.myVoid();			//调用内部类中成员\n
	23	\t\t}\n
	24	}\n
	运行该程序是会发生错误的，错误信息为“从内部类中访问局部变量i；需要被声明为最终类型”。在局部内部类中访问外部类的局部变量是不能够访问普通的局部变量的，必须将该局部变量声明为final。\n
	</string>
	<string name="c12_13">12.2.4  静态方法中的局部内部类\n局部内部类定义在非静态方法和静态方法中是不同的，在前面的两小节中都是将局部内部类定义在非静态方法中，在本节中就来学习静态方法中定义局部内部类的情况。在静态方法中定义的局部内部类要想访问外部类中的成员，该程序必须是静态成员。静态成员和非静态成员之间的访问是不变的。\n注意：在静态方法中定义的局部内部类要想访问外部类中的成员，该程序必须是静态成员。静态成员和非静态成员之间的访问是不变的。\n
	</string>
	<string name="c12_14">示例：一个错误的访问成员的程序\n
	01	class Wai\n
	02	{\n
	03	\t\tint i=3;\n
	04	\t\tpublic static void myVoid()\n
	05	\t\t{\n
	06	\t\t\t\tclass Nei				//定义一个局部内部类\n
	07	\t\t\t\t{
	08	\t\t\t\t\t\tpublic void myNeiVoid()\n
	09	\t\t\t\t\t\t{\n
	10	\t\t\t\t\t\t\t\tSystem.out.println("外部类的局部变量值为："+i);//访问外部类的成员变量\n
	11	\t\t\t\t\t\t}\n
	12	\t\t\t\t}\n
	13	\t\t\t\tNei n=new Nei();			//创建内部类对象\n
	14	\t\t\t\tn.myNeiVoid();			//调用内部类中的成员方法\n
	15	\t\t}\n
	16	}\n
	17	public class NeiBuLei12\n
	18	{\n
	19	\t\tpublic static void main(String args[])\n
	20	\t\t{\n
	21	\t\t\t\tWai w=new Wai();			//创建外部类对象\n
	22	\t\t\t\tw.myVoid();				//调用内部类中成员\n
	23	\t\t}\n
	24	}\n
	运行该程序是会发生错误的，错误信息为“无法从静态上下文中引用非静态变量i”。该程序主要错误原因是第三行定义的外部类变量是一个非静态成员变量。而本程序中定义的局部变量是定义在静态的方法中，所以是不能够正常访问的。如果想正常访问，就需要将程序修改成示例代码12-13的形式。\n
	</string>
	<string name="c12_15">12.3  静态内部类\n在第一节中已经讲解了非静态内部类，在本节中就来讲解什么是静态内部类。静态内部类就是在外部类中扮演一个静态成员的角色。在本节中就来学习如何创建静态内部类和关于静态内部类访问的问题。\n
	</string>
	<string name="c12_16">12.3.1  创建静态内部类\n创建静态内部类的形式和创建非静态内部类的形式很相似的，只是需要将该内部类使用static修饰成静态的形式。使用static修饰类，这在正常类中是不可能的。定义静态内部类的语法如下所示。\n
	class Wai\n
	{\n
	\t\tstatic class Nei\n
	\t\t{\n
	\t\t\t\t//内部类成员\n
	\t\t}\n
	\t\t//外部类成员\n
	}\n
	</string>
	<string name="c12_17">12.3.2  在外部类中访问静态内部类\n在外部类中访问静态内部类和在外部类中访问非静态内部类一样的，只需要从成员间访问的角度就可以考虑到这一点。\n【范例】示例代码是一个在外部类中访问静态内部类的程序。\n
	示例代码\n
	01	class Wai\n
	02	{\n
	03	\t\tstatic class Nei		//创建静态内部类\n
	04	\t\t{\n
	05	\t\t\t\tint i=5;			//内部类成员\n
	06	\t\t}\n
	07	\t\tpublic void myVoid()	//外部类成员\n
	08	\t\t{\n
	09	\t\t\t\tNei n=new Nei();	//创建一个内部类对象\n
	10	\t\t\t\tint ii=n.i;			//访问内部类成员\n
	11	\t\t\t\tSystem.out.println("静态内部类的变量值为："+ii);\n
	12	\t\t}\n
	13	}\n
	14	public class NeiBuLei15\n
	15	{\n
	16	\t\tpublic static void main(String args[])\n
	17	\t\t{\n
	18	\t\t\t\tWai w=new Wai();\n
	19	\t\t\t\tw.myVoid();\n
	20	\t\t}\n
	21	}\n
	</string>
	<string name="c12_18">12.3.3  在外部类外访问静态内部类\n通过上一小节的学习，知道在外部类中访问静态内部类和访问非静态内部类是相同的，但是在外部类中访问静态内部类和非静态内部类就不再相同。因为静态内部类是外部类的静态成员，静态成员是不需要外部类对象而存在的，所以在外部类外，对静态内部类进行访问时是不需要创建外部类对象的。\n注意：因为静态内部类是外部类的静态成员，静态成员是不需要外部类对象而存在的，所以在外部类外，对静态内部类进行访问时是不需要创建外部类对象的。\n
	</string>
	<string name="c12_19">12.4  匿名内部类\n在所有的内部类中最难的就应该是匿名内部类。匿名内部类从名字上看就知道是没有类名的类。在本节中就来介绍如何创建匿名内部类和如何进行关于匿名内部类的访问问题。\n
	</string>
	<string name="c12_20">12.4.1  创建匿名内部类\n在创建匿名内部类中将使用到继承父类或者实现接口的知识，匿名内部类是没有名字的，所以在创建匿名内部类时同时创建匿名内部类的对象。创建匿名内部类的语法格式如下所示。\n
	new NeiFather()\n
	{\n
	\t\t//匿名内部类\n
	};\n
在创建匿名内部类的语法中，NeiFather是匿名内部类继承的父类的类名，使用new同时创建了匿名内部类的对象。在匿名内部类中可以重写父类中的方法，也可以定义自己的方法。\n
	</string>
	<string name="c12_21">12.4.2  匿名内部类的初始化\n匿名内部类是没有名称的，所以匿名内部类也是不可能具有构造器的，这就出现一个问题。有时在匿名内部类中也是要定义成员变量的，但是该成员变量应该放在什么位置呢。这里的解决方法就是创建一个非静态语句块，将所有的初始化的成员变量都放在该非静态语句块中。这样在匿名内部类中的方法中就可以来调用这些成员变量。\n
	</string>
	<string name="c12_22">12.5  小结\n在本章讲解了Java中的内部类，内部类包括非静态内部类、局部内部类、静态内部类和匿名内部类，并分别对这些内部类进行了讲解。在讲解每一种内部类时，首先讲解如何创建该内部类，并且讲解了如何对内部类进行访问。\n
	</string>
</resources>