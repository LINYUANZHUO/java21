<?xml version="1.0" encoding="utf-8"?>
<resources>
	<string name="c7_01">在上一章中介绍了类和对象的概念，以及成员变量、局部变量和方法的概念。本章将介绍如何通过修饰符来控制变量的访问。首先介绍包的概念，后面将介绍各个控制权限的修饰符。通过本章的学习，读者应该能够完成如下几个目标。\n了解包的概念和如何使用包。\n知道类的访问级别有哪些，它们有什么区别。\n重点掌握final修饰符和static修饰符。\n
	</string>
	<string name="c7_02">7.1  包(package)\n所谓包，就好比日常生活中的箱子，是一个存放东西的空间。在Java中包的概念就好比Windows里的目录的概念，是一层一层的关系。按照功能的分类分别存放在各个包里。\n
	</string>
	<string name="c7_03">7.1.1  创建一个包\n使用包是为了更好地将代码进行分别管理，首先介绍如何创建一个包，语法为：\npackage 包名;\n例如下面的程序语句。\npackage a.b;\n创建包时有几个注意事项。\npackage为Java保留的关键字，不能使用别的符号进行代替。\npackage语句必须在第一行。\npackage语句只能有一个，不能有多个。\n如果包有多层的话用句点”.”分隔\n
	</string>
	<string name="c7_04">7.1.2  如何使用包\n当创建了一个包时就要引入一个包，引入一个包的关键字为import，语法为：\n
	import 包名.*;\n
	import 包名.类名;\n
【范例】下面通过代码来演示如何引入一个包。首先来看一个引入包的程序。\n
	示例代码\n
	01	package com.a;\n
	02	\n
	03	public class aaa\n
	04	{\n
	05	\t\tString emp = \"包中的成员变量\";\n
	06	\n
	07	\t\tpublic void getMes()\n
	08	\t\t{\n
	09	\t\t\t\tSystem.out.println(emp);\n
	10	\t\t}\n
	11	} \n
	</string>
	<string name="c7_05">7.1.3  什么是静态引入\n所谓静态引入就是引入包中的静态成员变量和静态方法。静态引入的关键字为static，静态的其他内容将将在后面的小结进行讲解。静态引入的语法为：\n
	import static 包名.aaa.*;\n
	import static 包名.aaa.方法名称;\n
【范例】下面通过代码来演示如何静态引入。\n
	示例代码\n
	01	//静态引入System.out.println方法\n
	02	import static java.lang.System.out;\n
	03	\n
	04	//test类测试包\n
	05	public class test\n
	06	{\n
	07	\t\t//Java程序的主入口函数\n
	08	\t\tpublic static void main(String[] args)\n
	09	\t\t{\n
	10	\t\t\t\t//打印并显示结果\n
	11	\t\t\t\tout.println("通过静态引入来打印数据");\n
	12	\t}\n
	13	} \n
	</string>
	<string name="c7_06">7.2  类的访问级别\n类的访问级别，就好比日常生活中常见的大树，要想到达树顶，要从树底下慢慢地爬上去。是一层一层的进行访问的。树底下的树枝能看到旁边的树枝，但看不到树顶的树枝。而在Java中，类的访问也是有一种关系的。下面介绍类的访问级别和成员变量的访问级别。本节所提到的修饰符请读者先行了解，将在第八章对其含义做详细说明。\n
	</string>
	<string name="c7_07">7.2.1  公开的访问级别\n所谓公开的访问级别在Java中表示为public，即在类的名称前面带有public修饰符。用public修饰符修饰该类，表示该类在任何包中的任何类都能访问该类。但要注意不同包的问题。下面代码演示如何用public修饰符修饰一个类。\n
	//test类描述的是用修饰符修饰类\n
	public class test\n
	{\n
	...//方法体\n
	}\n
	</string>
	<string name="c7_08">7.2.2  默认的访问级别\n默认的访问级别和公开的访问级别很相似，不同点就是默认的访问级别不能访问不同包下的类。只能访问同包下的类。默认的访问级别不需要在类前面加任何修饰符。下面通过代码来演示。下面代码演示如何定义一个默认的访问级别的类。\n
	//test类描述的是默认访问级别的类\n
	class test\n
	{\n
	...//方法体\n
	}\n
	</string>
	<string name="c7_09">7.3  什么是封装\n所谓封装，就好比用一个盒子把一些东西装起来。在Java中就好比在一个类里定义了一些成员变量和方法，通过限制其成员变量和方法的可见性，使得外界不能访问它们。因此封装展现了接口，隐藏了细节。本节所提到的修饰符请读者先行了解，将在第八章对其含义进行详细的说明。\n
	</string>
	<string name="c7_10">7.4  最终修饰符\n所谓最终修饰符，在字面上可以说为最终的，不变的意思。修饰符final可以修饰很多类型的数据，其被修饰的数据所具有的含义也各有不同。下面将分别介绍修饰成员变量、局部变量、方法以及基本类型所具有的含义。\n
	</string>
	<string name="c7_11">7.4.1  final修饰对象类型的成员变量\nfinal关键字修饰成员变量，其值是不能改变的。必须进行初始化。在一般情况下创建对象的时候，系统都对其成员变量进行默认初始化，被final关键字修饰的成员变量是不会被初始化的。\n
	</string>
	<string name="c7_12">7.4.2  final修饰基本类型的成员变量\n在本小节和上一小节里的对象类型的成员变量很相似。当final修饰基本类型的成员变量的时候，其值是不能改变的，也就是人们常说的常量。而对象类型的成员变量是指其引用不能改变。下面通过代码来介绍final修饰基本类型的成员变量有哪些特点。\n【范例】下面用代码来演示final关键字修饰基本类型的成员变量没有初值的错误。\n
	示例代码\n
	01	//test类描述的是final修饰的成员变量\n
	02	public class test\n
	03	{\n
	04	\t\t//把int变量申明为final类型\n
	05	\t\tfinal int i;\n
	06	\n
	07	\t\t//Java程序的主入口函数\n
	08	\t\tpublic static void main(String[] args)\n
	09	\t\t{\n
	10	\t\t\t\t//创建test类的对象实例\n
	11	\t\t\t\ttest t = new test();\n
	12	\n
	13	\t\t\t\tint n = t.i;\n
	14	\n
	15	\t\t\t\t//打印并显示各个属性的值\n
	16	\t\t\t\tSystem.out.println(n);\n
	17	\t\t}\n
	18	}\n
	</string>
	<string name="c7_13">7.4.3  final修饰的局部变量\nfinal关键字修饰的局部变量和成员变量很相似，都是使其值不能被修改。但是被修饰的局部变量一旦被赋值后就不能进行修改了。如果在创建的时候没有对其赋值，那么在使用前还是可以对其赋值的。这就是成员变量和局部变量的不同点了。下面用代码来演示。\n【范例】代码演示修饰局部变量可以不进行初始化赋值。\n
	示例代码\n
	01	//test类描述的是final修饰的局部变量\n
	02	public class test\n
	03	{\n
	04	\t\t//定义了一个方法\n
	05	\t\tpublic void getMes()\n
	06	\t\t{\n
	07	\t\t\t\tSystem.out.println("程序顺利运行");\n
	08	\t\t}\n
	09	\n
	10	\t\t//Java程序的主入口函数\n
	11	\t\tpublic static void main(String[] args)\n
	12	\t\t{\n
	13	\t\t\t\t//创建test类的对象实例\n
	14	\t\t\t\ttest t = new test();\n
	15	\n
	16	\t\t\t\t//调用方法打印结果\n
	17	\t\t\t\tt.getMes();\n
	18	\t\t}\n
	19	} \n
	</string>
	<string name="c7_14">7.4.4  final修饰的方法\n当用final关键字修饰方法时，和修饰成员变量、局部变量不太一样。被修饰的方法能被该类的子类所继承，但不能重写了。这样保护了父类某些特殊的数据。下面用代码来演示使用final关键字和不使用的区别。\n
	</string>
	<string name="c7_15">7.5  静态修饰符\n静态修饰符static是Java保留的关键字，是静态的意思。所谓静态就是在内存中只能有一份。static能修饰变量、方法、语句块、内部类，下面分别对它们作介绍。\n
	</string>
	<string name="c7_16">7.5.1  什么是静态变量\n所谓静态变量就是只能存在一份，它属于类的，不随着对象的创建而建立副本。如果不想在创建对象的时候就需要知道一些相关信息，那么就声明为static类型的，被修饰为static类型的成员变量不属于对象，它是属于类的，并且当静态变量的值被改变是，将会改变全局的值。\n
	</string>
	<string name="c7_17">7.5.2  静态变量的访问\n通过上一小节里的说明，让读者基本了解了什么是静态成员变量。下面介绍如何访问静态的成员变量。主要通过如下方式。\n
	类名.静态成员变量名称\n
	静态成员变量名称\n
	【范例】下面通过代码来演示在静态的方法里使用非静态成员变量出现的错误。\n
	示例代码\n\n
	01	//test类描述的是static修饰的成员变量\n
	02	public class test \n
	03	{\n
	04	\t\t//申明一个static类型的String类型的变量color\n
	05	\t\tString color = "绿色";\n
	06	\n
	07	\t\t//Java程序的主入口函数\n
	08	\t\tpublic static void main(String[] args)\n
	09	\t\t{\n
	10	\t\t\t\t//打印并显示\n
	11	\t\t\t\tSystem.out.println(color);\n
	12	\t\t}\n
	13	}\n
	</string>
	<string name="c7_18">7.5.3  什么是静态常数\n通过前面章节的学习让读者了解了static关键字的使用以及注意事项。下面介绍使用修饰符static的另一种形式——常量。所谓常量指的就是唯一的、不可变的、只存在一份的。在Java里用static final两种关键字来修饰成员变量。下面用代码来演示如何申明静态常量。\n
	//申明两个静态常量\n
	public static final int i = 11;\n
	public static final float i = 11.0F;\n
	public static final double PI = 3.14;\n
	static关键字修饰成员变量是属于类，随着类的创建而创建。\n
	final关键字修饰成员变量的值是不能改变的。\n
	static关键字和final关键字没有前后顺序之分。\n
	</string>
	<string name="c7_19">7.6  小结\n通过学习本章的包、类的访问级别以及final关键字、static关键字，读者了解了成员变量的访问是如何控制的。在后面的章节里将要学习继承这一重要概念，以及更多的关键字。如果想了解更多关于本章的知识可以参考电子工业出版社出版的《Java程序设计经典教程：融合上机操作实例》一书进行学习。\n
	</string>
</resources>