<?xml version="1.0" encoding="utf-8"?>
<resources>
	<string name="c10_01">构造器在前面的章节里的代码中已经出现过很多次了。通过使用new关键字来调用构造器使其对象在内存中创建出来。下面将要详细的介绍构造器的一些知识。通过本章的学习，读者应该能够完成如下几个目标。\n了解什么是构造器。\n熟练掌握如何创建构造器。\n熟练掌握构造器的使用，包括构造器如何调用等问题。\n了解构造器的一些基本机制。\n
	</string>
	<string name="c10_02">10.1  什么是构造器\n在日常生活中，盖房子需要工具和工人，通过工人使用这些工具，来修建一个房子。在Java中，构造器就好比是工具，而new关键字就是工人，通过new关键字和构造器结合来创建对象。\n
	</string>
	<string name="c10_03">10.1.1  构造器的使用\n要建立对象就要使用new关键字来建立对象，这是建立对象唯一的方法。下面介绍构造器的语法组成。\n
\t\t类的修饰符 类的名称(参数列表)\n
\t\t{\n
\t\t//方法体\n
\t\t}\n
构造器可以使用的修饰符有public、protected、default、private，不写即为default类型的。\n
构造器的名称必须要和类的名称相同。\n
不能有返回值，void也不行。\n
构造器的参数可有可无。有一个也可有多个参数。\n
	</string>
	<string name="c10_04">10.1.2  被修饰的构造器\n构造器是可以被修饰符修饰的，不同的修饰符修饰构造器也具有不同的效果，本小节通过使用不同的修饰符来进行代码演示。\n
	</string>
	<string name="c10_05">10.1.3  构造器方法与普通方法的区别\n构造器方法和普通的方法是有一定区别，主要是功能上、修饰符上、返回值上和命名上有本质的区别。区别如下：\n构造器是为了创建一个类的对象实例，也可以在创建对象的时候使用。\n方法是为了执行相应的方法体。即Java代码。\n构造器可以被修饰为public、protected、default、private类型，但不能修饰为abstract、final、native、static、synchronized\n方法可以修饰为除了protected、native外的修饰符。\n构造器没有返回值也没有void。\n方法没有返回值或有任何类型的返回值。\n构造器的名称要和类的名称相同。\n方法的名称可以任意起，但要注意标识符的命名规则。使其更具有意义。\n
	</string>
	<string name="c10_06">10.2  如何实例化一个对象\n所谓实例化就是在内存中实实在在的创建一个对象，在日常生活中就好比创造了一个东西出来。而在Java中，实例化一个对象用new关键字来完成。下面先介绍new关键字的语法以及通过一个例子来演示。\nnew 构造器的名称(参数列表)\nnew为Java关键字要注意大小写。\n构造器的名称要和类的名称相同。\n通过调用构造器方法来对这个对象进行一些必要的初始化。\n用new关键字实例化对象后返回该对象的引用。\n
	</string>
	<string name="c10_07">10.3  构造器的使用\n通过前面的介绍，读者已经对构造器有了基本的了解。但是使用构造器也是有一些注意事项的。在本节里介绍构造器在父子类中是如何使用的。\n
	</string>
	<string name="c10_08">10.3.1  构造器的调用\n构造器的调用一般有两种情况，一般是在本类里调用或在同包下的另一个类调用，另一种情况是子类调用父类的构造器的。\n
	</string>
	<string name="c10_09">10.3.2  构造器的重载\n所谓构造器的重载和方法的重载是一样的，重载就好比日常生活中人的名字，有大名有小名，但这些名字都指的是这个人，不同点就是让这个人去做的事情可能不一样。这个和Java里的方法的重载很相似。下面来看一下重载的要求。\n构造器的重载的方法名称相同，但参数列表不相同。如：参数个数和参数类型等。\n构造器的重载的方法是没有返回值的。\n构造器不能被继承，这和方法有所区别。\n构造器的修饰符只有public、private、protected这三个。\n
	</string>
	<string name="c10_10">10.3.3  父子类间的构造器的调用流程\n在前面学习过用new关键字来创建一个对象，但在继承关系发生时，父类与子类是如何创建对象的呢。它们的顺序又是什么样的呢。\n
详细的步骤如下所述。\n在用new关键字创建对象aceing的时候。执行new aceing()会进入到aceing对象的构造器方法体内。\n因为继承的关系，会默认调用方法super进入到父类bike对象的构造器方法体内。\n对父类bike对象进行初始化。父类的构造器方法执行完毕后回到子类的构造器继续执行。\n执行子类的构造器方法，并初始化数据。\n
	</string>
	<string name="c10_11">10.3.4  如何自定义构造器\n自定义的构造器已在前面的代码中多次使用。所谓自定义构造器就是不显式的定义构造器，编译器就是自动地生成一个无参的构造器，但是一旦显式的定义了一个构造器的话，编译器就不会自动生成了。下面用代码演示如何自定义构造器。\n
	public class test\n
	{\n
	\t\t//定义一个无参的构造器\n
	\t\tpublic test()\n
	\t\t{\n
	\t\t\t\t//该构造器的方法体\n
	\t\t}\n
	\t\t//具有两个参数的构造器\n
	\t\tpublic test(String i, int n)\n
	\t\t{\n
	\t\t\t\t//该构造器的方法体\n
	\t\t}\n
	}\n
	</string>
	<string name="c10_12">10.4  什么是单例模式\n单例模式是Java模式工厂里的一种，所谓单例模式，就是在一个时间段内对象只存在一份。单例模式就是把构造器修饰为private类型的，用一个public类型的方法返回该对象的引用。
	</string>
	<string name="c10_13">10.5  构造器在程序中是何时运行的\n前面的章节里介绍了构造器是为了创建对象并对其对象的成员变量进行初始化等操作，那么在构造器运行前系统执行什么呢，之后又执行什么呢。下面总结一下。\n加载要创建该对象的父类，以及成员变量和其他继承关系。\n加载该类的静态块和静态成员变量，并对其进行初始化等操作。\n静态块和静态成员变量加载完毕后创建对象并加载非静态成员变量，并对其进行初始化等操作。\n执行构造器里的方法体，完成后该类的对象创建完毕。\n父类的运行顺序和该类的顺序是一样的。\n
	</string>
	<string name="c10_14">10.6  小结\n本章介绍了构造器的知识，以及它的使用和注意事项。了解构造器方法的执行顺序对了解程序的执行有很好的帮助。希望读者重点了解构造器的使用这个小节里的内容。如果想了解更多的关于本章的内容，可以参考电子工业出版社出版的《深入浅出JDK 6.0》一书进行学习。\n
	</string>
</resources>